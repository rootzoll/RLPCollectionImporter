/**
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.GroupProfile;
import io.swagger.client.model.UserCredential;
import io.swagger.client.model.UserProfile;
import io.swagger.client.model.GroupEntry;
import io.swagger.client.model.AuthorityEntries;
import io.swagger.client.model.UserEntry;
import io.swagger.client.model.GroupEntries;
import io.swagger.client.model.UserEntries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IAMVApi {
    private ApiClient apiClient;

    public IAMVApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IAMVApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addMembership */
    private com.squareup.okhttp.Call addMembershipCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling addMembership(Async)");
        }
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling addMembership(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members/{member}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
        .replaceAll("\\{" + "member" + "\\}", apiClient.escapeString(member.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add member to the group.
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addMembership(String repository, String group, String member) throws ApiException {
        addMembershipWithHttpInfo(repository, group, member);
    }

    /**
     * Add member to the group.
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addMembershipWithHttpInfo(String repository, String group, String member) throws ApiException {
        com.squareup.okhttp.Call call = addMembershipCall(repository, group, member, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add member to the group. (asynchronously)
     * Add member to the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMembershipAsync(String repository, String group, String member, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMembershipCall(repository, group, member, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeGroupProfile */
    private com.squareup.okhttp.Call changeGroupProfileCall(String repository, String group, GroupProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeGroupProfile(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling changeGroupProfile(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeGroupProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/profile".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Set profile of the group.
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeGroupProfile(String repository, String group, GroupProfile body) throws ApiException {
        changeGroupProfileWithHttpInfo(repository, group, body);
    }

    /**
     * Set profile of the group.
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeGroupProfileWithHttpInfo(String repository, String group, GroupProfile body) throws ApiException {
        com.squareup.okhttp.Call call = changeGroupProfileCall(repository, group, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set profile of the group. (asynchronously)
     * Set profile of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeGroupProfileAsync(String repository, String group, GroupProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeGroupProfileCall(repository, group, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeUserPassword */
    private com.squareup.okhttp.Call changeUserPasswordCall(String repository, String person, UserCredential body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeUserPassword(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/credential".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change/Set password of the user.
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserPassword(String repository, String person, UserCredential body) throws ApiException {
        changeUserPasswordWithHttpInfo(repository, person, body);
    }

    /**
     * Change/Set password of the user.
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserPasswordWithHttpInfo(String repository, String person, UserCredential body) throws ApiException {
        com.squareup.okhttp.Call call = changeUserPasswordCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change/Set password of the user. (asynchronously)
     * Change/Set password of the user. (To change foreign passwords or set passwords, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body credential (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordAsync(String repository, String person, UserCredential body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserPasswordCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for changeUserProfile */
    private com.squareup.okhttp.Call changeUserProfileCall(String repository, String person, UserProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeUserProfile(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling changeUserProfile(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeUserProfile(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}/profile".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Set profile of the user.
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserProfile(String repository, String person, UserProfile body) throws ApiException {
        changeUserProfileWithHttpInfo(repository, person, body);
    }

    /**
     * Set profile of the user.
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserProfileWithHttpInfo(String repository, String person, UserProfile body) throws ApiException {
        com.squareup.okhttp.Call call = changeUserProfileCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set profile of the user. (asynchronously)
     * Set profile of the user. (To set foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserProfileAsync(String repository, String person, UserProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserProfileCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createGroup */
    private com.squareup.okhttp.Call createGroupCall(String repository, String group, GroupProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new group.
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createGroup(String repository, String group, GroupProfile body) throws ApiException {
        createGroupWithHttpInfo(repository, group, body);
    }

    /**
     * Create a new group.
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createGroupWithHttpInfo(String repository, String group, GroupProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createGroupCall(repository, group, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new group. (asynchronously)
     * Create a new group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupAsync(String repository, String group, GroupProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupCall(repository, group, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createUser */
    private com.squareup.okhttp.Call createUserCall(String repository, String person, UserProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createUser(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling createUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new user.
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUser(String repository, String person, UserProfile body) throws ApiException {
        createUserWithHttpInfo(repository, person, body);
    }

    /**
     * Create a new user.
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUserWithHttpInfo(String repository, String person, UserProfile body) throws ApiException {
        com.squareup.okhttp.Call call = createUserCall(repository, person, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new user. (asynchronously)
     * Create a new user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param body profile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(String repository, String person, UserProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserCall(repository, person, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteGroup */
    private com.squareup.okhttp.Call deleteGroupCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete the group.
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGroup(String repository, String group) throws ApiException {
        deleteGroupWithHttpInfo(repository, group);
    }

    /**
     * Delete the group.
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(String repository, String group) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupCall(repository, group, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the group. (asynchronously)
     * Delete the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupAsync(String repository, String group, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupCall(repository, group, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteMembership */
    private com.squareup.okhttp.Call deleteMembershipCall(String repository, String group, String member, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteMembership(Async)");
        }
        
        // verify the required parameter 'member' is set
        if (member == null) {
            throw new ApiException("Missing the required parameter 'member' when calling deleteMembership(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members/{member}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()))
        .replaceAll("\\{" + "member" + "\\}", apiClient.escapeString(member.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete member from the group.
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMembership(String repository, String group, String member) throws ApiException {
        deleteMembershipWithHttpInfo(repository, group, member);
    }

    /**
     * Delete member from the group.
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMembershipWithHttpInfo(String repository, String group, String member) throws ApiException {
        com.squareup.okhttp.Call call = deleteMembershipCall(repository, group, member, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete member from the group. (asynchronously)
     * Delete member from the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param member authorityName of member (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMembershipAsync(String repository, String group, String member, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMembershipCall(repository, group, member, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteUser(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling deleteUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete the user.
     * Delete the user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String repository, String person) throws ApiException {
        deleteUserWithHttpInfo(repository, person);
    }

    /**
     * Delete the user.
     * Delete the user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String repository, String person) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserCall(repository, person, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the user. (asynchronously)
     * Delete the user. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String repository, String person, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserCall(repository, person, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getGroup */
    private com.squareup.okhttp.Call getGroupCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getGroup(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the group.
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return GroupEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupEntry getGroup(String repository, String group) throws ApiException {
        ApiResponse<GroupEntry> resp = getGroupWithHttpInfo(repository, group);
        return resp.getData();
    }

    /**
     * Get the group.
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return ApiResponse&lt;GroupEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupEntry> getGroupWithHttpInfo(String repository, String group) throws ApiException {
        com.squareup.okhttp.Call call = getGroupCall(repository, group, null, null);
        Type localVarReturnType = new TypeToken<GroupEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the group. (asynchronously)
     * Get the group. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupAsync(String repository, String group, final ApiCallback<GroupEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupCall(repository, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMembership */
    private com.squareup.okhttp.Call getMembershipCall(String repository, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMembership(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getMembership(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}/{group}/members".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all members of the group.
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return AuthorityEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthorityEntries getMembership(String repository, String group) throws ApiException {
        ApiResponse<AuthorityEntries> resp = getMembershipWithHttpInfo(repository, group);
        return resp.getData();
    }

    /**
     * Get all members of the group.
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @return ApiResponse&lt;AuthorityEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthorityEntries> getMembershipWithHttpInfo(String repository, String group) throws ApiException {
        com.squareup.okhttp.Call call = getMembershipCall(repository, group, null, null);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all members of the group. (asynchronously)
     * Get all members of the group. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param group groupname (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMembershipAsync(String repository, String group, final ApiCallback<AuthorityEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMembershipCall(repository, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthorityEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUser */
    private com.squareup.okhttp.Call getUserCall(String repository, String person, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getUser(Async)");
        }
        
        // verify the required parameter 'person' is set
        if (person == null) {
            throw new ApiException("Missing the required parameter 'person' when calling getUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}/{person}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "person" + "\\}", apiClient.escapeString(person.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the user.
     * Get the user. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return UserEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEntry getUser(String repository, String person) throws ApiException {
        ApiResponse<UserEntry> resp = getUserWithHttpInfo(repository, person);
        return resp.getData();
    }

    /**
     * Get the user.
     * Get the user. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @return ApiResponse&lt;UserEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEntry> getUserWithHttpInfo(String repository, String person) throws ApiException {
        com.squareup.okhttp.Call call = getUserCall(repository, person, null, null);
        Type localVarReturnType = new TypeToken<UserEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the user. (asynchronously)
     * Get the user. (To get foreign profiles, admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param person username (or \&quot;-me-\&quot; for current user) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(String repository, String person, final ApiCallback<UserEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserCall(repository, person, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchGroup */
    private com.squareup.okhttp.Call searchGroupCall(String repository, String pattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchGroup(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/groups/{repository}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pattern", pattern));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Search groups.
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @return GroupEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupEntries searchGroup(String repository, String pattern) throws ApiException {
        ApiResponse<GroupEntries> resp = searchGroupWithHttpInfo(repository, pattern);
        return resp.getData();
    }

    /**
     * Search groups.
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @return ApiResponse&lt;GroupEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupEntries> searchGroupWithHttpInfo(String repository, String pattern) throws ApiException {
        com.squareup.okhttp.Call call = searchGroupCall(repository, pattern, null, null);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search groups. (asynchronously)
     * Search groups. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGroupAsync(String repository, String pattern, final ApiCallback<GroupEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGroupCall(repository, pattern, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchUser */
    private com.squareup.okhttp.Call searchUserCall(String repository, String pattern, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling searchUser(Async)");
        }
        
        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling searchUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/iam/v1/people/{repository}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pattern != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pattern", pattern));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Search users.
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @return UserEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEntries searchUser(String repository, String pattern) throws ApiException {
        ApiResponse<UserEntries> resp = searchUserWithHttpInfo(repository, pattern);
        return resp.getData();
    }

    /**
     * Search users.
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @return ApiResponse&lt;UserEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEntries> searchUserWithHttpInfo(String repository, String pattern) throws ApiException {
        com.squareup.okhttp.Call call = searchUserCall(repository, pattern, null, null);
        Type localVarReturnType = new TypeToken<UserEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search users. (asynchronously)
     * Search users. (admin rights are required.)
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param pattern pattern (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUserAsync(String repository, String pattern, final ApiCallback<UserEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUserCall(repository, pattern, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
