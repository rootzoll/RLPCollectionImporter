/**
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Usages;
import io.swagger.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class USAGEVApi {
    private ApiClient apiClient;

    public USAGEVApi() {
        this(Configuration.getDefaultApiClient());
    }

    public USAGEVApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getUsages */
    private com.squareup.okhttp.Call getUsagesCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUsages(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/usage/v1/usages/{appId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all usages of an application.
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsages(String appId) throws ApiException {
        ApiResponse<Usages> resp = getUsagesWithHttpInfo(appId);
        return resp.getData();
    }

    /**
     * Get all usages of an application.
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsagesWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesCall(appId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an application. (asynchronously)
     * Get all usages of an application.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesAsync(String appId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesCall(appId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsagesByCourse */
    private com.squareup.okhttp.Call getUsagesByCourseCall(String appId, String courseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUsagesByCourse(Async)");
        }
        
        // verify the required parameter 'courseId' is set
        if (courseId == null) {
            throw new ApiException("Missing the required parameter 'courseId' when calling getUsagesByCourse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/usage/v1/usages/course/{appId}/{courseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()))
        .replaceAll("\\{" + "courseId" + "\\}", apiClient.escapeString(courseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all usages of an course.
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsagesByCourse(String appId, String courseId) throws ApiException {
        ApiResponse<Usages> resp = getUsagesByCourseWithHttpInfo(appId, courseId);
        return resp.getData();
    }

    /**
     * Get all usages of an course.
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsagesByCourseWithHttpInfo(String appId, String courseId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesByCourseCall(appId, courseId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an course. (asynchronously)
     * Get all usages of an course.
     * @param appId ID of application (or \&quot;-home-\&quot; for home repository) (required)
     * @param courseId ID of course (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesByCourseAsync(String appId, String courseId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesByCourseCall(appId, courseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsagesByNode */
    private com.squareup.okhttp.Call getUsagesByNodeCall(String nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getUsagesByNode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/usage/v1/usages/node/{nodeId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all usages of an node.
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @return Usages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Usages getUsagesByNode(String nodeId) throws ApiException {
        ApiResponse<Usages> resp = getUsagesByNodeWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Get all usages of an node.
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @return ApiResponse&lt;Usages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Usages> getUsagesByNodeWithHttpInfo(String nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getUsagesByNodeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all usages of an node. (asynchronously)
     * Get all usages of an node.
     * @param nodeId ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsagesByNodeAsync(String nodeId, final ApiCallback<Usages> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsagesByNodeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Usages>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
