/**
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.io.File;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.NodeEntry;
import io.swagger.client.model.NodeProperty;
import io.swagger.client.model.NodeEntries;
import io.swagger.client.model.SearchResult;
import io.swagger.client.model.NodePermissionEntry;
import io.swagger.client.model.NodeVersionEntry;
import io.swagger.client.model.NodeVersionRefEntries;
import io.swagger.client.model.ACL;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NODEVApi {
    private ApiClient apiClient;

    public NODEVApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NODEVApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for changeContentWithVersioning */
    private com.squareup.okhttp.Call changeContentWithVersioningCall(String repository, String node, String versionComment, String mimetype, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeContentWithVersioning(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeContentWithVersioning(Async)");
        }
        
        // verify the required parameter 'versionComment' is set
        if (versionComment == null) {
            throw new ApiException("Missing the required parameter 'versionComment' when calling changeContentWithVersioning(Async)");
        }
        
        // verify the required parameter 'mimetype' is set
        if (mimetype == null) {
            throw new ApiException("Missing the required parameter 'mimetype' when calling changeContentWithVersioning(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/content".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionComment", versionComment));
        if (mimetype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "mimetype", mimetype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change content of node (new version).
     * Change content of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeContentWithVersioning(String repository, String node, String versionComment, String mimetype, File file) throws ApiException {
        ApiResponse<NodeEntry> resp = changeContentWithVersioningWithHttpInfo(repository, node, versionComment, mimetype, file);
        return resp.getData();
    }

    /**
     * Change content of node (new version).
     * Change content of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeContentWithVersioningWithHttpInfo(String repository, String node, String versionComment, String mimetype, File file) throws ApiException {
        com.squareup.okhttp.Call call = changeContentWithVersioningCall(repository, node, versionComment, mimetype, file, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change content of node (new version). (asynchronously)
     * Change content of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param mimetype MIME-Type (required)
     * @param file  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeContentWithVersioningAsync(String repository, String node, String versionComment, String mimetype, File file, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeContentWithVersioningCall(repository, node, versionComment, mimetype, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changeMetadata */
    private com.squareup.okhttp.Call changeMetadataCall(String repository, String node, List<NodeProperty> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeMetadata(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeMetadata(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change metadata of node.
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeMetadata(String repository, String node, List<NodeProperty> body) throws ApiException {
        ApiResponse<NodeEntry> resp = changeMetadataWithHttpInfo(repository, node, body);
        return resp.getData();
    }

    /**
     * Change metadata of node.
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeMetadataWithHttpInfo(String repository, String node, List<NodeProperty> body) throws ApiException {
        com.squareup.okhttp.Call call = changeMetadataCall(repository, node, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change metadata of node. (asynchronously)
     * Change metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeMetadataAsync(String repository, String node, List<NodeProperty> body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeMetadataCall(repository, node, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changeMetadataWithVersioning */
    private com.squareup.okhttp.Call changeMetadataWithVersioningCall(String repository, String node, String versionComment, List<NodeProperty> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'versionComment' is set
        if (versionComment == null) {
            throw new ApiException("Missing the required parameter 'versionComment' when calling changeMetadataWithVersioning(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling changeMetadataWithVersioning(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (versionComment != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "versionComment", versionComment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change metadata of node (new version).
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry changeMetadataWithVersioning(String repository, String node, String versionComment, List<NodeProperty> body) throws ApiException {
        ApiResponse<NodeEntry> resp = changeMetadataWithVersioningWithHttpInfo(repository, node, versionComment, body);
        return resp.getData();
    }

    /**
     * Change metadata of node (new version).
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> changeMetadataWithVersioningWithHttpInfo(String repository, String node, String versionComment, List<NodeProperty> body) throws ApiException {
        com.squareup.okhttp.Call call = changeMetadataWithVersioningCall(repository, node, versionComment, body, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change metadata of node (new version). (asynchronously)
     * Change metadata of node (new version).
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param versionComment comment (required)
     * @param body properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeMetadataWithVersioningAsync(String repository, String node, String versionComment, List<NodeProperty> body, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeMetadataWithVersioningCall(repository, node, versionComment, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createChild */
    private com.squareup.okhttp.Call createChildCall(String repository, String node, String type, List<NodeProperty> body, List<String> aspects, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChild(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChild(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createChild(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createChild(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (aspects != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "aspects", aspects));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new child.
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param type type of node (required)
     * @param body properties (required)
     * @param aspects aspects of node (optional)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChild(String repository, String node, String type, List<NodeProperty> body, List<String> aspects) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildWithHttpInfo(repository, node, type, body, aspects);
        return resp.getData();
    }

    /**
     * Create a new child.
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param type type of node (required)
     * @param body properties (required)
     * @param aspects aspects of node (optional)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildWithHttpInfo(String repository, String node, String type, List<NodeProperty> body, List<String> aspects) throws ApiException {
        com.squareup.okhttp.Call call = createChildCall(repository, node, type, body, aspects, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child. (asynchronously)
     * Create a new child.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param type type of node (required)
     * @param body properties (required)
     * @param aspects aspects of node (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildAsync(String repository, String node, String type, List<NodeProperty> body, List<String> aspects, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildCall(repository, node, type, body, aspects, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createChildByCopying */
    private com.squareup.okhttp.Call createChildByCopyingCall(String repository, String node, String source, Boolean withChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createChildByCopying(Async)");
        }
        
        // verify the required parameter 'withChildren' is set
        if (withChildren == null) {
            throw new ApiException("Missing the required parameter 'withChildren' when calling createChildByCopying(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children/_copy".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "source", source));
        if (withChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "withChildren", withChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new child by copying.
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChildByCopying(String repository, String node, String source, Boolean withChildren) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildByCopyingWithHttpInfo(repository, node, source, withChildren);
        return resp.getData();
    }

    /**
     * Create a new child by copying.
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildByCopyingWithHttpInfo(String repository, String node, String source, Boolean withChildren) throws ApiException {
        com.squareup.okhttp.Call call = createChildByCopyingCall(repository, node, source, withChildren, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child by copying. (asynchronously)
     * Create a new child by copying.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param withChildren flag for children (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildByCopyingAsync(String repository, String node, String source, Boolean withChildren, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildByCopyingCall(repository, node, source, withChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createChildByMoving */
    private com.squareup.okhttp.Call createChildByMovingCall(String repository, String node, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createChildByMoving(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createChildByMoving(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling createChildByMoving(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children/_move".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new child by moving.
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry createChildByMoving(String repository, String node, String source) throws ApiException {
        ApiResponse<NodeEntry> resp = createChildByMovingWithHttpInfo(repository, node, source);
        return resp.getData();
    }

    /**
     * Create a new child by moving.
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> createChildByMovingWithHttpInfo(String repository, String node, String source) throws ApiException {
        com.squareup.okhttp.Call call = createChildByMovingCall(repository, node, source, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new child by moving. (asynchronously)
     * Create a new child by moving.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param source ID of source node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChildByMovingAsync(String repository, String node, String source, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChildByMovingCall(repository, node, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for delete */
    private com.squareup.okhttp.Call deleteCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling delete(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling delete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete node.
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void delete(String repository, String node) throws ApiException {
        deleteWithHttpInfo(repository, node);
    }

    /**
     * Delete node.
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = deleteCall(repository, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete node. (asynchronously)
     * Delete node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String repository, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCall(repository, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getChildren */
    private com.squareup.okhttp.Call getChildrenCall(String repository, String node, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getChildren(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getChildren(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/children".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skipCount", skipCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get children of node.
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return NodeEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntries getChildren(String repository, String node, Integer maxItems, Integer skipCount) throws ApiException {
        ApiResponse<NodeEntries> resp = getChildrenWithHttpInfo(repository, node, maxItems, skipCount);
        return resp.getData();
    }

    /**
     * Get children of node.
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return ApiResponse&lt;NodeEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntries> getChildrenWithHttpInfo(String repository, String node, Integer maxItems, Integer skipCount) throws ApiException {
        com.squareup.okhttp.Call call = getChildrenCall(repository, node, maxItems, skipCount, null, null);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get children of node. (asynchronously)
     * Get children of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of parent node (required)
     * @param maxItems maximum items per page (optional, default to 500)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChildrenAsync(String repository, String node, Integer maxItems, Integer skipCount, final ApiCallback<NodeEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChildrenCall(repository, node, maxItems, skipCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMetadata */
    private com.squareup.okhttp.Call getMetadataCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getMetadata(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/metadata".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get metadata of node.
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry getMetadata(String repository, String node) throws ApiException {
        ApiResponse<NodeEntry> resp = getMetadataWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get metadata of node.
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> getMetadataWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getMetadataCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of node. (asynchronously)
     * Get metadata of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMetadataAsync(String repository, String node, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMetadataCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNodes */
    private com.squareup.okhttp.Call getNodesCall(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getNodes(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getNodes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "query", query));
        if (facettes != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "facettes", facettes));
        if (maxItems != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxItems", maxItems));
        if (skipCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "skipCount", skipCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Searching nodes.
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return SearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResult getNodes(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount) throws ApiException {
        ApiResponse<SearchResult> resp = getNodesWithHttpInfo(repository, query, facettes, maxItems, skipCount);
        return resp.getData();
    }

    /**
     * Searching nodes.
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @return ApiResponse&lt;SearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResult> getNodesWithHttpInfo(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount) throws ApiException {
        com.squareup.okhttp.Call call = getNodesCall(repository, query, facettes, maxItems, skipCount, null, null);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searching nodes. (asynchronously)
     * Searching nodes.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param query lucene query (required)
     * @param facettes facettes (optional)
     * @param maxItems maximum items per page (optional, default to 10)
     * @param skipCount skip a number of items (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodesAsync(String repository, String query, List<String> facettes, Integer maxItems, Integer skipCount, final ApiCallback<SearchResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodesCall(repository, query, facettes, maxItems, skipCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPermission */
    private com.squareup.okhttp.Call getPermissionCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getPermission(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPermission(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/permissions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all permission of node.
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodePermissionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodePermissionEntry getPermission(String repository, String node) throws ApiException {
        ApiResponse<NodePermissionEntry> resp = getPermissionWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get all permission of node.
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodePermissionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodePermissionEntry> getPermissionWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getPermissionCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodePermissionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all permission of node. (asynchronously)
     * Get all permission of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPermissionAsync(String repository, String node, final ApiCallback<NodePermissionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPermissionCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodePermissionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVersionMetadata */
    private com.squareup.okhttp.Call getVersionMetadataCall(String repository, String node, Integer major, Integer minor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'major' is set
        if (major == null) {
            throw new ApiException("Missing the required parameter 'major' when calling getVersionMetadata(Async)");
        }
        
        // verify the required parameter 'minor' is set
        if (minor == null) {
            throw new ApiException("Missing the required parameter 'minor' when calling getVersionMetadata(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/metadata".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
        .replaceAll("\\{" + "major" + "\\}", apiClient.escapeString(major.toString()))
        .replaceAll("\\{" + "minor" + "\\}", apiClient.escapeString(minor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get metadata of node version.
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return NodeVersionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeVersionEntry getVersionMetadata(String repository, String node, Integer major, Integer minor) throws ApiException {
        ApiResponse<NodeVersionEntry> resp = getVersionMetadataWithHttpInfo(repository, node, major, minor);
        return resp.getData();
    }

    /**
     * Get metadata of node version.
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return ApiResponse&lt;NodeVersionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeVersionEntry> getVersionMetadataWithHttpInfo(String repository, String node, Integer major, Integer minor) throws ApiException {
        com.squareup.okhttp.Call call = getVersionMetadataCall(repository, node, major, minor, null, null);
        Type localVarReturnType = new TypeToken<NodeVersionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get metadata of node version. (asynchronously)
     * Get metadata of node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionMetadataAsync(String repository, String node, Integer major, Integer minor, final ApiCallback<NodeVersionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionMetadataCall(repository, node, major, minor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeVersionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVersions */
    private com.squareup.okhttp.Call getVersionsCall(String repository, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getVersions(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getVersions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all versions of node.
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return NodeVersionRefEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeVersionRefEntries getVersions(String repository, String node) throws ApiException {
        ApiResponse<NodeVersionRefEntries> resp = getVersionsWithHttpInfo(repository, node);
        return resp.getData();
    }

    /**
     * Get all versions of node.
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;NodeVersionRefEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeVersionRefEntries> getVersionsWithHttpInfo(String repository, String node) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsCall(repository, node, null, null);
        Type localVarReturnType = new TypeToken<NodeVersionRefEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all versions of node. (asynchronously)
     * Get all versions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsAsync(String repository, String node, final ApiCallback<NodeVersionRefEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsCall(repository, node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeVersionRefEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for revertVersion */
    private com.squareup.okhttp.Call revertVersionCall(String repository, String node, Integer major, Integer minor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'major' is set
        if (major == null) {
            throw new ApiException("Missing the required parameter 'major' when calling revertVersion(Async)");
        }
        
        // verify the required parameter 'minor' is set
        if (minor == null) {
            throw new ApiException("Missing the required parameter 'minor' when calling revertVersion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/versions/{major}/{minor}/_revert".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()))
        .replaceAll("\\{" + "major" + "\\}", apiClient.escapeString(major.toString()))
        .replaceAll("\\{" + "minor" + "\\}", apiClient.escapeString(minor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Revert to node version.
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return NodeEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeEntry revertVersion(String repository, String node, Integer major, Integer minor) throws ApiException {
        ApiResponse<NodeEntry> resp = revertVersionWithHttpInfo(repository, node, major, minor);
        return resp.getData();
    }

    /**
     * Revert to node version.
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @return ApiResponse&lt;NodeEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeEntry> revertVersionWithHttpInfo(String repository, String node, Integer major, Integer minor) throws ApiException {
        com.squareup.okhttp.Call call = revertVersionCall(repository, node, major, minor, null, null);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Revert to node version. (asynchronously)
     * Revert to node version.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param major major version (required)
     * @param minor minor version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revertVersionAsync(String repository, String node, Integer major, Integer minor, final ApiCallback<NodeEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revertVersionCall(repository, node, major, minor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setPermission */
    private com.squareup.okhttp.Call setPermissionCall(String repository, String node, ACL body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling setPermission(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setPermission(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/node/v1/nodes/{repository}/{node}/permissions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Set local permissions of node.
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPermission(String repository, String node, ACL body) throws ApiException {
        setPermissionWithHttpInfo(repository, node, body);
    }

    /**
     * Set local permissions of node.
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPermissionWithHttpInfo(String repository, String node, ACL body) throws ApiException {
        com.squareup.okhttp.Call call = setPermissionCall(repository, node, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set local permissions of node. (asynchronously)
     * Set local permissions of node.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param node ID of node (required)
     * @param body permissions (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPermissionAsync(String repository, String node, ACL body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPermissionCall(repository, node, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
