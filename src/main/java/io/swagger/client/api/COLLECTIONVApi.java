/**
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.Collection;
import io.swagger.client.model.CollectionEntry;
import io.swagger.client.model.CollectionEntries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class COLLECTIONVApi {
    private ApiClient apiClient;

    public COLLECTIONVApi() {
        this(Configuration.getDefaultApiClient());
    }

    public COLLECTIONVApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addToCollection */
    private com.squareup.okhttp.Call addToCollectionCall(String repository, String collection, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addToCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling addToCollection(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling addToCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/references/{node}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add a node to a collection.
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addToCollection(String repository, String collection, String node) throws ApiException {
        addToCollectionWithHttpInfo(repository, collection, node);
    }

    /**
     * Add a node to a collection.
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addToCollectionWithHttpInfo(String repository, String collection, String node) throws ApiException {
        com.squareup.okhttp.Call call = addToCollectionCall(repository, collection, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a node to a collection. (asynchronously)
     * Add a node to a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addToCollectionAsync(String repository, String collection, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addToCollectionCall(repository, collection, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createCollection */
    private com.squareup.okhttp.Call createCollectionCall(String repository, String collection, Collection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling createCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling createCollection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/children".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new collection.
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @return CollectionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntry createCollection(String repository, String collection, Collection body) throws ApiException {
        ApiResponse<CollectionEntry> resp = createCollectionWithHttpInfo(repository, collection, body);
        return resp.getData();
    }

    /**
     * Create a new collection.
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @return ApiResponse&lt;CollectionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntry> createCollectionWithHttpInfo(String repository, String collection, Collection body) throws ApiException {
        com.squareup.okhttp.Call call = createCollectionCall(repository, collection, body, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new collection. (asynchronously)
     * Create a new collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param body collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCollectionAsync(String repository, String collection, Collection body, final ApiCallback<CollectionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCollectionCall(repository, collection, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteCollection */
    private com.squareup.okhttp.Call deleteCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a collection.
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCollection(String repository, String collection) throws ApiException {
        deleteCollectionWithHttpInfo(repository, collection);
    }

    /**
     * Delete a collection.
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = deleteCollectionCall(repository, collection, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a collection. (asynchronously)
     * Delete a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCollectionAsync(String repository, String collection, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCollectionCall(repository, collection, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteFromCollection */
    private com.squareup.okhttp.Call deleteFromCollectionCall(String repository, String collection, String node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling deleteFromCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling deleteFromCollection(Async)");
        }
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling deleteFromCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/references/{node}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
        .replaceAll("\\{" + "node" + "\\}", apiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a node from a collection.
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFromCollection(String repository, String collection, String node) throws ApiException {
        deleteFromCollectionWithHttpInfo(repository, collection, node);
    }

    /**
     * Delete a node from a collection.
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFromCollectionWithHttpInfo(String repository, String collection, String node) throws ApiException {
        com.squareup.okhttp.Call call = deleteFromCollectionCall(repository, collection, node, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node from a collection. (asynchronously)
     * Delete a node from a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param node ID of node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFromCollectionAsync(String repository, String collection, String node, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFromCollectionCall(repository, collection, node, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getCollection */
    private com.squareup.okhttp.Call getCollectionCall(String repository, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getCollection(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a collection.
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return CollectionEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntry getCollection(String repository, String collection) throws ApiException {
        ApiResponse<CollectionEntry> resp = getCollectionWithHttpInfo(repository, collection);
        return resp.getData();
    }

    /**
     * Get a collection.
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @return ApiResponse&lt;CollectionEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntry> getCollectionWithHttpInfo(String repository, String collection) throws ApiException {
        com.squareup.okhttp.Call call = getCollectionCall(repository, collection, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a collection. (asynchronously)
     * Get a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollectionAsync(String repository, String collection, final ApiCallback<CollectionEntry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollectionCall(repository, collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCollections */
    private com.squareup.okhttp.Call getCollectionsCall(String repository, String collection, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getCollections(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new ApiException("Missing the required parameter 'collection' when calling getCollections(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getCollections(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}/children".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()))
        .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get collections.
     * Get collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (required)
     * @return CollectionEntries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionEntries getCollections(String repository, String collection, String scope) throws ApiException {
        ApiResponse<CollectionEntries> resp = getCollectionsWithHttpInfo(repository, collection, scope);
        return resp.getData();
    }

    /**
     * Get collections.
     * Get collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (required)
     * @return ApiResponse&lt;CollectionEntries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionEntries> getCollectionsWithHttpInfo(String repository, String collection, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getCollectionsCall(repository, collection, scope, null, null);
        Type localVarReturnType = new TypeToken<CollectionEntries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get collections. (asynchronously)
     * Get collections.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param collection ID of parent collection (or \&quot;-root-\&quot; for level0 collections) (required)
     * @param scope scope (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollectionsAsync(String repository, String collection, String scope, final ApiCallback<CollectionEntries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollectionsCall(repository, collection, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionEntries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCollection */
    private com.squareup.okhttp.Call updateCollectionCall(String repository, Collection body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling updateCollection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCollection(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collection/v1/collections/{repository}/{collection}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "repository" + "\\}", apiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a collection.
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCollection(String repository, Collection body) throws ApiException {
        updateCollectionWithHttpInfo(repository, body);
    }

    /**
     * Update a collection.
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCollectionWithHttpInfo(String repository, Collection body) throws ApiException {
        com.squareup.okhttp.Call call = updateCollectionCall(repository, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a collection. (asynchronously)
     * Update a collection.
     * @param repository ID of repository (or \&quot;-home-\&quot; for home repository) (required)
     * @param body collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCollectionAsync(String repository, Collection body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCollectionCall(repository, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
