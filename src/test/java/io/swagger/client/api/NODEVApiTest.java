/**
 * edu-sharing Repository REST API
 * The public restful API of the edu-sharing repository.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.NodeEntry;
import io.swagger.client.model.NodeProperty;
import io.swagger.client.model.NodeEntries;
import io.swagger.client.model.SearchResult;
import io.swagger.client.model.NodePermissionEntry;
import io.swagger.client.model.NodeVersionEntry;
import io.swagger.client.model.NodeVersionRefEntries;
import io.swagger.client.model.ACL;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NODEVApi
 */
public class NODEVApiTest {

    private final NODEVApi api = new NODEVApi();

    
    /**
     * Change content of node (new version).
     *
     * Change content of node (new version).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeContentWithVersioningTest() throws ApiException {
        String repository = null;
        String node = null;
        String versionComment = null;
        String mimetype = null;
        File file = null;
        // NodeEntry response = api.changeContentWithVersioning(repository, node, versionComment, mimetype, file);

        // TODO: test validations
    }
    
    /**
     * Change metadata of node.
     *
     * Change metadata of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeMetadataTest() throws ApiException {
        String repository = null;
        String node = null;
        List<NodeProperty> body = null;
        // NodeEntry response = api.changeMetadata(repository, node, body);

        // TODO: test validations
    }
    
    /**
     * Change metadata of node (new version).
     *
     * Change metadata of node (new version).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeMetadataWithVersioningTest() throws ApiException {
        String repository = null;
        String node = null;
        String versionComment = null;
        List<NodeProperty> body = null;
        // NodeEntry response = api.changeMetadataWithVersioning(repository, node, versionComment, body);

        // TODO: test validations
    }
    
    /**
     * Create a new child.
     *
     * Create a new child.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildTest() throws ApiException {
        String repository = null;
        String node = null;
        String type = null;
        List<NodeProperty> body = null;
        List<String> aspects = null;
        // NodeEntry response = api.createChild(repository, node, type, body, aspects);

        // TODO: test validations
    }
    
    /**
     * Create a new child by copying.
     *
     * Create a new child by copying.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildByCopyingTest() throws ApiException {
        String repository = null;
        String node = null;
        String source = null;
        Boolean withChildren = null;
        // NodeEntry response = api.createChildByCopying(repository, node, source, withChildren);

        // TODO: test validations
    }
    
    /**
     * Create a new child by moving.
     *
     * Create a new child by moving.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildByMovingTest() throws ApiException {
        String repository = null;
        String node = null;
        String source = null;
        // NodeEntry response = api.createChildByMoving(repository, node, source);

        // TODO: test validations
    }
    
    /**
     * Delete node.
     *
     * Delete node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String repository = null;
        String node = null;
        // api.delete(repository, node);

        // TODO: test validations
    }
    
    /**
     * Get children of node.
     *
     * Get children of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildrenTest() throws ApiException {
        String repository = null;
        String node = null;
        Integer maxItems = null;
        Integer skipCount = null;
        // NodeEntries response = api.getChildren(repository, node, maxItems, skipCount);

        // TODO: test validations
    }
    
    /**
     * Get metadata of node.
     *
     * Get metadata of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetadataTest() throws ApiException {
        String repository = null;
        String node = null;
        // NodeEntry response = api.getMetadata(repository, node);

        // TODO: test validations
    }
    
    /**
     * Searching nodes.
     *
     * Searching nodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesTest() throws ApiException {
        String repository = null;
        String query = null;
        List<String> facettes = null;
        Integer maxItems = null;
        Integer skipCount = null;
        // SearchResult response = api.getNodes(repository, query, facettes, maxItems, skipCount);

        // TODO: test validations
    }
    
    /**
     * Get all permission of node.
     *
     * Get all permission of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPermissionTest() throws ApiException {
        String repository = null;
        String node = null;
        // NodePermissionEntry response = api.getPermission(repository, node);

        // TODO: test validations
    }
    
    /**
     * Get metadata of node version.
     *
     * Get metadata of node version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionMetadataTest() throws ApiException {
        String repository = null;
        String node = null;
        Integer major = null;
        Integer minor = null;
        // NodeVersionEntry response = api.getVersionMetadata(repository, node, major, minor);

        // TODO: test validations
    }
    
    /**
     * Get all versions of node.
     *
     * Get all versions of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsTest() throws ApiException {
        String repository = null;
        String node = null;
        // NodeVersionRefEntries response = api.getVersions(repository, node);

        // TODO: test validations
    }
    
    /**
     * Revert to node version.
     *
     * Revert to node version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revertVersionTest() throws ApiException {
        String repository = null;
        String node = null;
        Integer major = null;
        Integer minor = null;
        // NodeEntry response = api.revertVersion(repository, node, major, minor);

        // TODO: test validations
    }
    
    /**
     * Set local permissions of node.
     *
     * Set local permissions of node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPermissionTest() throws ApiException {
        String repository = null;
        String node = null;
        ACL body = null;
        // api.setPermission(repository, node, body);

        // TODO: test validations
    }
    
}
